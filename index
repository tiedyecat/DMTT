<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Meta Ads Manager & CRM Data Analysis Guide</title>
    <!-- Prevent search engines from indexing this page -->
    <meta name="robots" content="noindex, nofollow" />
    <!-- Load Chart.js from a CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      /* Global Dark Mode Styling */
      body {
        max-width: 960px;
        margin: 20px auto;
        padding: 20px;
        font-family: sans-serif;
        background-color: #121212;
        color: #e0e0e0;
        line-height: 1.6;
      }
      a {
        color: #64b5f6;
      }
      h1, h2, h3, h4 {
        color: #ffffff;
      }
      blockquote {
        background: #1e1e1e;
        border-left: 5px solid #64b5f6;
        padding: 10px 20px;
        margin: 20px 0;
      }
      /* Table styling */
      table {
        border-collapse: collapse;
        margin-top: 30px;
        width: 100%;
      }
      th, td {
        border: 1px solid #444;
        padding: 8px;
        text-align: center;
      }
      th {
        background-color: #1e1e1e;
      }
      td {
        background-color: #181818;
      }
      /* Chart styling */
      canvas {
        max-width: 100%;
        height: 400px;
      }
    </style>
  </head>
  <body>
    <h1>Meta Ads Manager & CRM Data Analysis Guide</h1>

    <!-- Intro / Tips Section -->
    <h2>Tips</h2>
    <ol>
      <li>
        <strong>Model Recommendation:</strong> Use at least ChatGPT-4 for this process.
      </li>
      <li>
        <strong>Data Verification:</strong> Always cross-check the output data against your Ads Manager report and downloaded CSV/XLSX files. Although the system is reliable most of the time, a manual review helps catch any discrepancies.
      </li>
      <li>
        <strong>Custom Tools Notice:</strong> The code uses a custom module called <code>ace_tools</code> for displaying data frames. Please ensure that this module is installed and accessible in your environment, or replace it with your preferred method for displaying data.
      </li>
    </ol>

    <!-- Steps Sections -->
    <h2>Step 1: Download Sales Data</h2>
    <p>
      <strong>Action:</strong> Download the CSV file of all sales from Gymsales for your selected date range.
    </p>
    <p>
      <strong>Resources:</strong>
      <a href="https://docs.google.com/document/d/1r6saSF5H6ZCff3E608dHv0QiQAIxeB-iAffAs3TV9OY/edit?usp=sharing" target="_blank">Video & Guide</a>
    </p>

    <h2>Step 2: Generate the Ads Manager Demographic Report</h2>
    <p>
      <strong>Action:</strong> Generate the Ads Manager Demographic Report.
    </p>
    <p>
      <strong>Resource:</strong>
      <a href="https://www.loom.com/share/be5e7e373b344cbd9ee897c060283af1?sid=a2b73425-0de1-4767-b46c-5728a27a608a" target="_blank">Report Generation Video</a>
    </p>
    <p>
      <strong>Next, Copy and Paste This Prompt into ChatGPT:</strong>
    </p>
    <blockquote>
      Analyze Meta Ads Manager data to extract demographic performance insights (age group, gender) and creative effectiveness (e.g., headline performance by age group). The goal is to identify which audience segments and creatives drive the highest engagement, lowest cost, most leads, and sales—ranking them from top performing to lowest performing—then comparing that data to what represents buyers in the CRM.
    </blockquote>
    <p>
      Once you have exported the file, open ChatGPT and paste the prompt (including the Python code). This will ensure the data is cleaned and analyzed properly.
    </p>

    <h2>Step 3: Create the Dynamic Ad Elements Performance Report</h2>
    <p>
      This report analyzes performance by gender and age group for dynamic creative ads. Note that individual image, video, or GIF performance tied to demographics is not available on this platform yet.
    </p>
    <ul>
      <li>
        <strong>3a. Adding Image/Video Creative Reporting:</strong>
        <a href="https://www.loom.com/share/f8255c6e1aca4acba8deac5e46983951?sid=3e3e38d4-0ade-4c7d-a92e-61790ca9af8d" target="_blank">View Video</a>
      </li>
      <li>
        <strong>3b. Adding Headline Creative Reporting:</strong>
        <a href="https://www.loom.com/share/d2992f0ee3ff4a3ba2daeefd2e5994aa?sid=e0ca3889-27cc-4e0a-8818-8be814ba996d" target="_blank">View Video</a>
      </li>
      <li>
        <strong>3c. Adding Dynamic Primary Text/Body Copy Reporting:</strong>
        <a href="https://www.loom.com/share/b67c7e8e5b434db1b7180297ecfc8bc9?sid=4aa0731c-042f-4bff-9784-0ae0c37ce2cb" target="_blank">View Video</a>
      </li>
    </ul>
    <p>
      <strong>Additional Note:</strong> If you include placement data, be aware there might be slight mismatches when using age range and gender as variables. These can be resolved by matching ad IDs with placements and merging the data accordingly.
    </p>

    <h2>Step 4: Prepare for Data Analysis</h2>
    <p>
      After downloading the XLSX table files from the above steps, simply copy and paste the following prompt (including the Python code) into ChatGPT. This will clean and analyze your data without requiring additional debugging.
    </p>

    <!-- Visualization Section 1: Example Chart of Select Metrics -->
    <h2>Visualization: Example Chart of Select Metrics by Age &amp; Gender</h2>
    <p>
      This chart compares average CTR, click-through rate, and conversion rate (all in percentages) for different age and gender segments.
    </p>
    <div style="margin-bottom: 40px;">
      <canvas id="myChart"></canvas>
    </div>
    <script>
      // Example raw data array
      const rawData = [
        {
          age: "25-34",
          gender: "female",
          total_results: 86,
          total_impressions: 338429,
          total_clicks: 2154,
          total_spend: 3438.44,
          avg_cpm: 10.98,
          avg_cpc: 2.83,
          avg_ctr: 0.8874,
          avg_cpr: 42.47,
          click_through_rate: 0.6347,
          conversion_rate: 0.0250
        },
        {
          age: "25-34",
          gender: "male",
          total_results: 85,
          total_impressions: 350228,
          total_clicks: 2620,
          total_spend: 3093.73,
          avg_cpm: 9.18,
          avg_cpc: 3.03,
          avg_ctr: 0.8842,
          avg_cpr: 36.57,
          click_through_rate: 0.7480,
          conversion_rate: 0.0275
        },
        {
          age: "35-44",
          gender: "female",
          total_results: 65,
          total_impressions: 241168,
          total_clicks: 1824,
          total_spend: 2929.73,
          avg_cpm: 13.75,
          avg_cpc: 3.32,
          avg_ctr: 1.0087,
          avg_cpr: 44.01,
          click_through_rate: 0.7563,
          conversion_rate: 0.0222
        },
        {
          age: "35-44",
          gender: "male",
          total_results: 55,
          total_impressions: 207952,
          total_clicks: 2061,
          total_spend: 2214.71,
          avg_cpm: 11.18,
          avg_cpc: 1.82,
          avg_ctr: 1.1741,
          avg_cpr: 54.16,
          click_through_rate: 0.9910,
          conversion_rate: 0.0248
        },
        {
          age: "45-54",
          gender: "female",
          total_results: 45,
          total_impressions: 126904,
          total_clicks: 1316,
          total_spend: 2005.71,
          avg_cpm: 17.83,
          avg_cpc: 3.24,
          avg_ctr: 1.3601,
          avg_cpr: 57.77,
          click_through_rate: 1.0370,
          conversion_rate: 0.0224
        },
        {
          age: "45-54",
          gender: "male",
          total_results: 47,
          total_impressions: 116988,
          total_clicks: 1483,
          total_spend: 1643.88,
          avg_cpm: 14.36,
          avg_cpc: 1.92,
          avg_ctr: 1.3817,
          avg_cpr: 41.78,
          click_through_rate: 1.2675,
          conversion_rate: 0.0286
        }
      ];

      // Convert rawData for display purposes
      const dataWithDisplayFields = rawData.map(row => {
        const converted = { ...row };
        converted.avg_ctr_display = (row.avg_ctr * 100).toFixed(2) + "%";
        converted.click_through_rate_display = (row.click_through_rate * 100).toFixed(2) + "%";
        converted.conversion_rate_display = (row.conversion_rate * 100).toFixed(2) + "%";
        converted.total_spend_display = "$" + row.total_spend.toFixed(2);
        converted.avg_cpm_display = "$" + row.avg_cpm.toFixed(2);
        converted.avg_cpc_display = "$" + row.avg_cpc.toFixed(2);
        converted.avg_cpr_display = "$" + row.avg_cpr.toFixed(2);
        return converted;
      });

      // Prepare data for Chart.js
      const labels = dataWithDisplayFields.map(d => `${d.age} (${d.gender})`);
      const avgCtr = dataWithDisplayFields.map(d => d.avg_ctr * 100);
      const clickThrough = dataWithDisplayFields.map(d => d.click_through_rate * 100);
      const conversion = dataWithDisplayFields.map(d => d.conversion_rate * 100);

      const ctx1 = document.getElementById("myChart").getContext("2d");
      new Chart(ctx1, {
        type: "bar",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Avg CTR (%)",
              backgroundColor: "rgba(255, 99, 132, 0.6)",
              data: avgCtr
            },
            {
              label: "Click-Through Rate (%)",
              backgroundColor: "rgba(54, 162, 235, 0.6)",
              data: clickThrough
            },
            {
              label: "Conversion Rate (%)",
              backgroundColor: "rgba(255, 206, 86, 0.6)",
              data: conversion
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: "Percentage (%)"
              }
            }
          }
        }
      });
    </script>

    <!-- Data Table for Example Chart -->
    <h2>Data Table: Select Metrics by Age &amp; Gender</h2>
    <table>
      <thead>
        <tr>
          <th>Age</th>
          <th>Gender</th>
          <th>Total Results</th>
          <th>Total Spend</th>
          <th>Avg CPM</th>
          <th>Avg CPC</th>
          <th>Avg CTR</th>
          <th>Click-Through Rate</th>
          <th>Conversion Rate</th>
          <th>Avg CPR</th>
        </tr>
      </thead>
      <tbody>
        <script>
          dataWithDisplayFields.forEach(row => {
            document.write("<tr>");
            document.write(`<td>${row.age}</td>`);
            document.write(`<td>${row.gender}</td>`);
            document.write(`<td>${row.total_results}</td>`);
            document.write(`<td>${row.total_spend_display}</td>`);
            document.write(`<td>${row.avg_cpm_display}</td>`);
            document.write(`<td>${row.avg_cpc_display}</td>`);
            document.write(`<td>${row.avg_ctr_display}</td>`);
            document.write(`<td>${row.click_through_rate_display}</td>`);
            document.write(`<td>${row.conversion_rate_display}</td>`);
            document.write(`<td>${row.avg_cpr_display}</td>`);
            document.write("</tr>");
          });
        </script>
      </tbody>
    </table>

    <!-- Visualization Section 2: Low-Performing & Over-Targeted Segments -->
    <h2>Visualization: Low-Performing &amp; Over-Targeted Segments</h2>
    <p>
      This chart and table illustrate segments with a mismatch between CRM and Ads percentages.
    </p>
    <div style="margin-bottom: 40px;">
      <canvas id="myChart2"></canvas>
    </div>
    <script>
      // Raw data for low-performing/over-targeted segments
      const rawData2 = [
        {
          ageGroup: "35-44",
          gender: "female",
          CRM_Percent: 7.936507936507936,
          Ads_Percent: 9.759229534510434,
          Audience_Match_Ratio: 1.229662921348148
        },
        {
          ageGroup: "45-54",
          gender: "female",
          CRM_Percent: 4.23280423280423,
          Ads_Percent: 7.041198501872659,
          Audience_Match_Ratio: 1.6634831460674158
        },
        {
          ageGroup: "45-54",
          gender: "male",
          CRM_Percent: 4.23280423280423,
          Ads_Percent: 7.934724451578385,
          Audience_Match_Ratio: 1.8745786516853935
        },
        {
          ageGroup: "55-64",
          gender: "female",
          CRM_Percent: 3.1746031746031744,
          Ads_Percent: 4.280363830925628,
          Audience_Match_Ratio: 1.3483146067415733
        },
        {
          ageGroup: "55-64",
          gender: "male",
          CRM_Percent: 4.23280423280423,
          Ads_Percent: 5.270197966827181,
          Audience_Match_Ratio: 1.2450842696629214
        },
        {
          ageGroup: "65+",
          gender: "female",
          CRM_Percent: 2.380952380952381,
          Ads_Percent: 4.622792937399679,
          Audience_Match_Ratio: 1.9415730337078654
        },
        {
          ageGroup: "65+",
          gender: "male",
          CRM_Percent: 0.7936507936507936,
          Ads_Percent: 5.264847512038523,
          Audience_Match_Ratio: 6.63370786516854
        }
      ];

      // Prepare display data for rawData2
      const displayData2 = rawData2.map(item => ({
        ...item,
        CRM_Percent_Display: item.CRM_Percent.toFixed(2) + "%",
        Ads_Percent_Display: item.Ads_Percent.toFixed(2) + "%",
        Audience_Match_Ratio_Display: item.Audience_Match_Ratio.toFixed(2)
      }));

      // Prepare Chart.js data for rawData2
      const labels2 = displayData2.map(d => `${d.ageGroup} (${d.gender})`);
      const crmData2 = displayData2.map(d => d.CRM_Percent);
      const adsData2 = displayData2.map(d => d.Ads_Percent);
      const ratioData2 = displayData2.map(d => d.Audience_Match_Ratio);

      const ctx2 = document.getElementById("myChart2").getContext("2d");
      new Chart(ctx2, {
        type: "bar",
        data: {
          labels: labels2,
          datasets: [
            {
              label: "CRM (%)",
              data: crmData2,
              backgroundColor: "rgba(75, 192, 192, 0.6)",
              yAxisID: "yPercent"
            },
            {
              label: "Ads (%)",
              data: adsData2,
              backgroundColor: "rgba(255, 159, 64, 0.6)",
              yAxisID: "yPercent"
            },
            {
              label: "Audience Match Ratio",
              data: ratioData2,
              type: "line",
              borderColor: "rgba(153, 102, 255, 0.8)",
              backgroundColor: "rgba(153, 102, 255, 0.3)",
              yAxisID: "yRatio"
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            yPercent: {
              type: "linear",
              position: "left",
              beginAtZero: true,
              title: {
                display: true,
                text: "Percent (%)"
              }
            },
            yRatio: {
              type: "linear",
              position: "right",
              beginAtZero: true,
              title: {
                display: true,
                text: "Audience Match Ratio"
              }
            }
          }
        }
      });
    </script>

    <!-- Data Table for Low-Performing & Over-Targeted Segments -->
    <h2>Data Table: Low-Performing &amp; Over-Targeted Segments</h2>
    <table>
      <thead>
        <tr>
          <th>Age Group</th>
          <th>Gender</th>
          <th>CRM Percent</th>
          <th>Ads Percent</th>
          <th>Audience Match Ratio</th>
        </tr>
      </thead>
      <tbody>
        <script>
          displayData2.forEach(row => {
            document.write("<tr>");
            document.write(`<td>${row.ageGroup}</td>`);
            document.write(`<td>${row.gender}</td>`);
            document.write(`<td>${row.CRM_Percent_Display}</td>`);
            document.write(`<td>${row.Ads_Percent_Display}</td>`);
            document.write(`<td>${row.Audience_Match_Ratio_Display}</td>`);
            document.write("</tr>");
          });
        </script>
      </tbody>
    </table>

    <!-- Next Steps Section -->
    <h2>Next Steps</h2>
    <p>
      After completing the above analyses, consider the following additional question:
    </p>
    <blockquote>
      "How many Meta leads converted to a sale, and what are their approximate values, given the total amount spent on Meta ads?"
    </blockquote>
    <p>
      For further training and detailed instructions, please refer to the next training module.
    </p>
    <p>
      This guide now serves as a clear, professional reference for analyzing your Meta Ads Manager and CRM data, featuring real-world insights from the Physiq Fitness Evaluation.
    </p>
  </body>
</html>
